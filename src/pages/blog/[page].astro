---
// src/pages/blog/[page].astro
import { getCollection, type CollectionEntry } from "astro:content";
import type { GetStaticPaths, Page } from "astro"; // Import GetStaticPaths and Page types
import BaseLayout from "@/layouts/BaseLayout.astro";

export const prerender = true; // Ensure this page is pre-rendered
import BlogPostPreview from "@/components/BlogPostPreview.astro";
import { buttonVariants } from "@/components/ui/button";
import { slugify } from "@/lib/utils"; // Import slugify

// Define the type for blog posts
type BlogPost = CollectionEntry<"blog">;

// REMOVED PAGE_SIZE definition from here

// Implement getStaticPaths for pagination
export const getStaticPaths: GetStaticPaths = async ({ paginate }) => {
  const PAGE_SIZE = 6; // Define PAGE_SIZE *inside* the function

  const allPosts = (await getCollection("blog")).sort(
    (a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf(),
  );

  // Use paginate to generate page data
  const pageData = paginate(allPosts, { pageSize: PAGE_SIZE });

  // Ensure the first page is accessible via `/blog/` (or `/blog/1`)
  // Astro's paginate might already handle `/blog/1`, but let's be explicit if issues arise.
  // No explicit change needed here if paginate works as expected, but good to be aware.
  // If `/blog` still 404s, we might need to manually adjust the paths array generated by paginate.
  // For now, let's assume paginate handles it correctly.

  return pageData; // Return the result of paginate
};

// Get the paginated data for the current page
interface Props {
  page: Page<BlogPost>; // Define the type for the page prop
}
const { page } = Astro.props; // Access the paginated data

// Determine if this is the first page to show the featured post
const isFirstPage = page.currentPage === 1;

// Separate featured post logic (only for the first page)
const featuredPost: BlogPost | undefined = isFirstPage
  ? page.data[0]
  : undefined;
// Adjust posts to display: exclude featured post on first page, otherwise use all data for the page
const displayPosts: BlogPost[] = isFirstPage ? page.data.slice(1) : page.data;

// Adjust title and description for paginated pages
const pageNum = page.currentPage > 1 ? ` | Page ${page.currentPage}` : "";
const pageTitle = `Drone Tips & Insights Blog${pageNum} | Coalbanks Creative`;
const pageDescription = `Curious about drones? Explore the Coalbanks Creative blog for friendly tips, insights, and ideas for using aerial photos & video in Lethbridge and Southern Alberta.${pageNum}`;

// Get all unique categories for the category list
const allBlogPosts = await getCollection("blog");
const uniqueCategories = [
  ...new Set(allBlogPosts.map((post) => post.data.category)),
].sort();
---

<BaseLayout title={pageTitle} description={pageDescription}>
  <div class="container py-12 md:py-16">
    <h1 class="font-heading text-4xl font-bold mb-8 text-center tracking-tight">Drone Talk:<br /> Tips & Insights for Southern Alberta</h1> {/* Added tracking-tight */}
    <p class="text-muted-foreground text-lg mb-16 text-center max-w-2xl mx-auto">
      Curious about what drones can do for your business or project here in Lethbridge? Dive into our collection of helpful articles, tips, and ideas. Let's explore the potential of seeing things from a new perspective!
    </p>

    {/* Categories Section */}
    {uniqueCategories.length > 0 && (
      <section id="categories-section" class="mb-12">
        <h2 class="font-heading text-2xl font-semibold mb-4 text-center tracking-tight">Find Your Topic:</h2> {/* Added tracking-tight */}
        <div class="flex flex-wrap justify-center gap-2">
          {uniqueCategories.map(category => (
            <a
              href={`/blog/category/${slugify(category)}/1`}
              class={buttonVariants({ variant: "outline", size: "sm" })}
            >
              {category}
            </a>
          ))}
        </div>
      </section>
    )}

    {/* REMOVED Category Filter Buttons - Incompatible with static pagination */}

    {/* Featured Post Section - Only on First Page */}
    {isFirstPage && featuredPost && (
      <section id="featured-post-section" class="mb-12 md:mb-16">
        <h2 class="font-heading text-3xl font-semibold mb-6 border-b pb-3 tracking-tight">Hot Off the Press! Our Latest Post:</h2> {/* Added tracking-tight */}
        <BlogPostPreview
          post={featuredPost}
          headingLevel="h2"
          showImage={true}
          wrapperClass="bg-muted/50 border-primary/20"
        />
      </section>
    )}

    {/* Grid for Posts on Current Page */}
    {displayPosts.length > 0 && (
      <section id="posts-grid-section">
         {isFirstPage && featuredPost && <h2 class="font-heading text-3xl font-semibold mb-6 border-b pb-3 tracking-tight">Explore More Posts:</h2>} {/* Added tracking-tight */}
         {!isFirstPage && <h2 class="font-heading text-3xl font-semibold mb-6 border-b pb-3 tracking-tight">More Drone Talk (Page {page.currentPage}):</h2>} {/* Added tracking-tight */}
        <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-2 gap-8 md:gap-12">
          {displayPosts.map((post: BlogPost) => (
            <div>
              <BlogPostPreview post={post} headingLevel="h3" showImage={true} />
            </div>
          ))}
        </div>
      </section>
    )}

     {/* Handle case where there are no posts at all (on page 1) */}
     {page.total === 0 && (
         <p class="text-center text-muted-foreground mt-12">No blog posts found.</p>
      )}

     {/* Pagination Controls */}
     <nav class="mt-16 flex justify-center items-center gap-4" aria-label="Blog pages"> {/* Added items-center */}
        {page.url.prev ? (
          <a href={page.url.prev} class={buttonVariants({ variant: "outline" })}>
            &larr; Previous Page
          </a>
        ) : (
          <span class={buttonVariants({ variant: "outline", class: "opacity-50 cursor-not-allowed" })}>
             &larr; Previous Page
          </span>
        )}

       <span class="text-sm text-muted-foreground"> {/* Added page number display */}
         Page {page.currentPage} of {page.lastPage}
       </span>

        {page.url.next ? (
          <a href={page.url.next} class={buttonVariants({ variant: "outline" })}>
            Next Page &rarr;
          </a>
         ) : (
          <span class={buttonVariants({ variant: "outline", class: "opacity-50 cursor-not-allowed" })}>
             Next Page &rarr;
          </span>
         )}
     </nav>

   </div>
 </BaseLayout>

 <!-- REMOVED Style block for filters -->
 <!-- REMOVED Script block for filters -->
